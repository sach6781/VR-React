{"version":3,"sources":["components/VRPlayer.jsx","components/ARPlayer.js","App.js","index.js"],"names":["VRPlayer","videoRef","useRef","useEffect","scene","document","querySelector","videoURL","process","window","location","pathname","split","pop","video","createElement","setAttribute","play","onloadeddata","videosphere","appendChild","current","enterVR","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","session","baseLayer","wrap","_context","prev","next","navigator","xr","isSessionSupported","sent","requestSession","requiredFeatures","XRWebGLLayer","renderer","updateRenderState","requestReferenceSpace","then","referenceSpace","requestAnimationFrame","time","frame","t0","console","error","stop","apply","arguments","vrButton","onclick","_jsx","children","_jsxs","cursor","style","width","height","position","top","left","camera","ARPlayer","antialias","concat","scale","App","Router","Routes","Route","path","element","rootElement","getElementById","createRoot","render"],"mappings":"mMAyFeA,EAtFE,WACf,IAAMC,EAAWC,iBAAO,MACxBC,qBAAU,WAER,IAAMC,EAAQC,SAASC,cAAc,WAG/BC,EAAWC,aAFDC,OAAOC,SAASC,SAASC,MAAM,KAAKC,MAEK,OAEnDC,EAAQT,SAASU,cAAc,SACrCD,EAAME,aAAa,MAAOT,GAC1BO,EAAME,aAAa,cAAe,aAClCF,EAAME,aAAa,YAAY,GAC/BF,EAAME,aAAa,QAAQ,GAC3BF,EAAME,aAAa,sBAAsB,GACzCF,EAAME,aAAa,eAAe,GAClCF,EAAME,aAAa,SAAS,GAC5BF,EAAME,aAAa,KAAM,SACzBF,EAAMG,OAENH,EAAMI,aAAe,WACnB,IAAMC,EAAcd,SAASU,cAAc,iBAC3CI,EAAYH,aAAa,MAAO,UAChCG,EAAYH,aAAa,WAAY,WACrCZ,EAAMgB,YAAYD,EACpB,EAEAf,EAAMgB,YAAYN,GAClBb,EAASoB,QAAUP,EAEnB,IAAMQ,EAAO,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACmBC,UAAUC,GAAGC,mBAAmB,gBAAgB,KAAD,EAAxD,IAAAL,EAAAM,KACD,CAADN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEIC,UAAUC,GAAGG,eAAe,eAAgB,CAChEC,iBAAkB,CAAC,SAAU,iBAC5B,KAAD,EAFIX,EAAOG,EAAAM,KAIPR,EAAY,IAAIW,aAAaZ,EAASxB,EAAMqC,UAClDb,EAAQc,kBAAkB,CAAEb,cAC5BD,EAAQe,sBAAsB,eAAeC,MAAK,SAACC,GACjDjB,EAAQkB,uBAAsB,SAACC,EAAMC,GACnC,GAEJ,IAAGjB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAkB,GAAAlB,EAAA,SAEHmB,QAAQC,MAAM,0BAAyBpB,EAAAkB,IAAK,yBAAAlB,EAAAqB,OAAA,GAAAzB,EAAA,mBAGjD,kBAnBY,OAAAJ,EAAA8B,MAAA,KAAAC,UAAA,KAqBPC,EAAWlD,SAASU,cAAc,UAExCwC,EAASC,QAAUlC,EACnBlB,EAAMgB,YAAYmC,EACpB,GAAG,IAcH,OACEE,cAAA,OAAAC,SAOEC,eAAA,WAASC,OAAO,mBAAmBC,MAAO,CAACC,MAAO,MAAOC,OAAQ,MAAOC,SAAU,WAAYC,IAAK,OAAQC,KAAM,SAASR,SAAA,CAC1HD,cAAA,gBAAcI,MAAO,CAAEG,SAAU,WAAYC,IAAK,QAASC,KAAM,WAE/DT,cAAA,YAAUU,QAAM,EAAC,yBAIzB,ECpEeC,EAhBE,WAEf,OACEX,cAAA,WAASY,UAAU,QAAOX,SAExBD,cAAA,YACE,oBAAAa,OALa9D,+CAKc,KAC3BwD,SAAS,UACTO,MAAM,iBAMd,ECmEeC,EAZH,WACV,OACEf,cAACgB,IAAM,CAAAf,SACLC,eAACe,IAAM,CAAAhB,SAAA,CAELD,cAACkB,IAAK,CAACC,KAAK,YAAYC,QAASpB,cAACW,EAAQ,MAC1CX,cAACkB,IAAK,CAACC,KAAK,aAAaC,QAASpB,cAACzD,EAAQ,UAInD,EC7EM8E,EAAczE,SAAS0E,eAAe,QAC/BC,qBAAWF,GAEnBG,OAAOxB,cAACe,EAAG,I","file":"static/js/main.f3c3ab64.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport 'aframe';\r\n\r\nconst VRPlayer = () => {\r\n  const videoRef = useRef(null);\r\n  useEffect(() => {\r\n    \r\n    const scene = document.querySelector('a-scene');\r\n    const videoId = window.location.pathname.split('/').pop();\r\n\r\n    const videoURL = process.env.PUBLIC_URL + '/' + videoId +'.mp4';\r\n\r\n    const video = document.createElement('video');\r\n    video.setAttribute('src', videoURL);\r\n    video.setAttribute('crossorigin', 'anonymous');\r\n    video.setAttribute('autoplay', true);\r\n    video.setAttribute('loop', true);\r\n    video.setAttribute('webkit-playsinline', true);\r\n    video.setAttribute('playsinline', true);\r\n    video.setAttribute('muted', true);\r\n    video.setAttribute('id', 'video');\r\n    video.play();\r\n\r\n    video.onloadeddata = () => {\r\n      const videosphere = document.createElement('a-videosphere');\r\n      videosphere.setAttribute('src', '#video');\r\n      videosphere.setAttribute('rotation', '0 180 0');\r\n      scene.appendChild(videosphere);\r\n    };\r\n\r\n    scene.appendChild(video);\r\n    videoRef.current = video;\r\n\r\n    const enterVR = async () => {\r\n      const xrSessionSupported = await navigator.xr.isSessionSupported('immersive-vr');\r\n      if (xrSessionSupported) {\r\n        try {\r\n          const session = await navigator.xr.requestSession('immersive-vr', {\r\n            requiredFeatures: ['viewer', 'local-floor'],\r\n          });\r\n\r\n          const baseLayer = new XRWebGLLayer(session, scene.renderer);\r\n          session.updateRenderState({ baseLayer });\r\n          session.requestReferenceSpace('local-floor').then((referenceSpace) => {\r\n            session.requestAnimationFrame((time, frame) => {\r\n              // Update VR scene\r\n            });\r\n          });\r\n        } catch (e) {\r\n          console.error('Error entering VR mode:', e);\r\n        }\r\n      }\r\n    };\r\n\r\n    const vrButton = document.createElement('button');\r\n    // vrButton.innerText = 'Click to Enter VR Mode';\r\n    vrButton.onclick = enterVR;\r\n    scene.appendChild(vrButton);\r\n  }, []);\r\n\r\n  const handlePlay = () => {\r\n    if (videoRef.current) {\r\n      videoRef.current.play();\r\n    }\r\n  };\r\n\r\n  const handlePause = () => {\r\n    if (videoRef.current) {\r\n      videoRef.current.pause();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <a-scene cursor=\"rayOrigin: mouse\" style={{ width: '10vw', height: '10vh' }}>\r\n        <a-entity camera look-controls></a-entity>\r\n      </a-scene> */}\r\n      {/* <button onClick={handlePlay}>Start Video</button>\r\n      <button onClick={handlePause}>Stop Video</button> */}\r\n\r\n      <a-scene cursor=\"rayOrigin: mouse\" style={{width: '10%', height: '10%', position: 'absolute', top: '10px', left: '100px'}}>\r\n      <a-vr-mode-ui style={{ position: 'absolute', top: '100px', left: '100px' }}></a-vr-mode-ui>\r\n\r\n        <a-entity camera look-controls></a-entity>\r\n      </a-scene>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VRPlayer;\r\n\r\n","import React from 'react';\r\nimport 'aframe';\r\n\r\nconst ARPlayer = () => {\r\n    const videoURL = process.env.PUBLIC_URL + '/' + 'lieutenantHead/lieutenantHead.gltf';\r\n  return (\r\n    <a-scene antialias=\"false\">\r\n\r\n      <a-entity\r\n        gltf-model={`url(${videoURL})`}\r\n        position=\"0 1.5 0\"\r\n        scale=\"0.1 0.1 0.1\" \r\n      ></a-entity>\r\n\r\n      \r\n    </a-scene>\r\n  );\r\n};\r\n\r\nexport default ARPlayer;\r\n","// import { useEffect, useRef, useState } from \"react\";\r\n// import VideoJS from \"./components/VideoJS\";\r\n// import Box from \"./components/Box\";\r\n// import CameraPicker from \"./components/CameraPicker/CameraPicker\";\r\n// import Highlights from \"./components/Highlights\";\r\n// import ChosenHighlight from \"./components/ChosenHighlight\";\r\n// import VideoCard from \"./components/VideoCard\";\r\n// import 'webxr-polyfill';\r\n\r\n\r\n// import { Typography } from \"@mui/material\";\r\n\r\n// import { data } from \"./data.js\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n// import { Container, InputGroup, Table } from \"react-bootstrap\";\r\n// import Form from \"react-bootstrap/Form\";\r\n\r\n// import \"./styles.css\";\r\n// import VRThreeJS from \"./components/VRThreeJS\";\r\n// import MyVRScene from \"./components/MyVRScene\";\r\n// import VRPlayer from \"./components/VRPlayer.jsx\";\r\n\r\n// export default function App() {\r\n//   const [team, setTeam] = useState();\r\n//   const [search, setSearch] = useState(\"\");\r\n\r\n//   const [vidtype, setVidtype] = useState(\"\");\r\n\r\n//   const videoURL = process.env.PUBLIC_URL + '/' + '360-sea-mountain.mp4';\r\n//   console.log('Printing video URL - ', videoURL)\r\n\r\n\r\n//   useEffect(() => {\r\n\r\n//     console.log(team);\r\n//   }, [team]);\r\n\r\n\r\n//   return (\r\n//     <div>\r\n//       {/* <Typography gutterBottom variant=\"h4\" component=\"div\">\r\n//         360<span>&#176;</span> View\r\n//       </Typography>\r\n//           <Box\r\n//             style={{\r\n//               maxWidth: 900,\r\n//               margin: \"0 auto\",\r\n//               overflow: \"hidden\"\r\n//             }}\r\n//           >\r\n//             <ChosenHighlight team={team} />\r\n\r\n          \r\n\r\n//           </Box> */}\r\n\r\n//       {/* <VRThreeJS /> */}\r\n//       <div style={{ display: 'flex' }}>\r\n//         {/* <MyVRScene width=\"50%\" height=\"50%\" /> */}\r\n//         <VRPlayer width=\"50%\" height=\"50%\" />\r\n//       </div>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\nimport HomePage from './components/HomePage';\r\nimport VideoPlayer from './components/VideoPlayer';\r\nimport VRPlayer from './components/VRPlayer';\r\nimport ARPlayer from './components/ARPlayer';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        {/* <Route path=\"/VR-React\" element={<HomePage />} /> */}\r\n        <Route path=\"/VR-React\" element={<ARPlayer />} />\r\n        <Route path=\"/video/:id\" element={<VRPlayer />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n","import { StrictMode } from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = createRoot(rootElement);\r\n\r\nroot.render(<App />);\r\n"],"sourceRoot":""}